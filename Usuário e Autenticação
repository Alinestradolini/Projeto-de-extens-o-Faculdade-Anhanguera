import tkinter as tk
from tkinter import ttk, simpledialog
import pandas as pd
import random
import time
from sklearn.ensemble import IsolationForest, RandomForestRegressor
from sklearn.metrics import mean_squared_error
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
import plotly.graph_objects as go
import plotly.express as px
from plotly.subplots import make_subplots
import seaborn as sns
import numpy as np
import bcrypt
import sqlite3

# Função para inicializar o banco de dados e criar a tabela de usuários
def initialize_database():
    connection = sqlite3.connect("user_database.db")
    cursor = connection.cursor()

    # Criar tabela de usuários
    cursor.execute('''CREATE TABLE IF NOT EXISTS users
                      (id INTEGER PRIMARY KEY AUTOINCREMENT, 
                       username TEXT NOT NULL UNIQUE, 
                       password TEXT NOT NULL)''')

    connection.commit()
    connection.close()

# Inicializar o banco de dados
initialize_database()

# Função para inserir um novo usuário no banco de dados (com senha criptografada)
def insert_user(username, password):
    hashed_password = bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt())
    connection = sqlite3.connect("user_database.db")
    cursor = connection.cursor()
    cursor.execute("INSERT INTO users (username, password) VALUES (?, ?)", (username, hashed_password))
    connection.commit()
    connection.close()

# Função para autenticar usuários
def authenticate_user():
    username = username_entry.get()
    password = password_entry.get()

    # Recuperar senha armazenada no banco de dados
    stored_hashed_password = get_user_password(username)

    if stored_hashed_password:
        # Comparar a senha fornecida com a senha armazenada
        if bcrypt.checkpw(password.encode('utf-8'), stored_hashed_password):
            login_frame.destroy()
            initialize_gui()
            update_data()
        else:
            error_label.config(text="Senha incorreta")
    else:
        error_label.config(text="Usuário não encontrado")

# Função para obter a senha do usuário do banco de dados
def get_user_password(username):
    connection = sqlite3.connect("user_database.db")
    cursor = connection.cursor()
    cursor.execute("SELECT password FROM users WHERE username=?", (username,))
    result = cursor.fetchone()
    connection.close()
    
    return result[0] if result else None

# Função para registrar um novo usuário
def register_user():
    new_username = simpledialog.askstring("Registro", "Digite um novo nome de usuário:")
    if new_username:
        # Verificar se o nome de usuário já existe
        if get_user_password(new_username):
            tk.messagebox.showerror("Erro", "Este nome de usuário já está em uso.")
        else:
            new_password = simpledialog.askstring("Registro", "Digite uma nova senha:")
            if new_password:
                insert_user(new_username, new_password)
                tk.messagebox.showinfo("Registro", "Usuário registrado com sucesso.")

# ... (restante do código)

# Função para inicializar a GUI de login
def initialize_login_gui():
    global login_frame, username_entry, password_entry, error_label

    login_frame = tk.Tk()
    login_frame.title("Login")

    tk.Label(login_frame, text="Nome de Usuário:").grid(row=0, column=0, padx=10, pady=10)
    tk.Label(login_frame, text="Senha:").grid(row=1, column=0, padx=10, pady=10)

    username_entry = tk.Entry(login_frame)
    password_entry = tk.Entry(login_frame, show="*")

    username_entry.grid(row=0, column=1, padx=10, pady=10)
    password_entry.grid(row=1, column=1, padx=10, pady=10)

    tk.Button(login_frame, text="Login", command=authenticate_user).grid(row=2, column=1, pady=10)
    tk.Button(login_frame, text="Registrar", command=register_user).grid(row=3, column=1, pady=10)

    error_label = tk.Label(login_frame, text="", fg="red")
    error_label.grid(row=4, column=0, columnspan=2)

    login_frame.mainloop()

# ... (restante do código)

if __name__ == "__main__":
    initialize_login_gui()
