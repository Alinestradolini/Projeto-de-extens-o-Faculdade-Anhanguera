import tkinter as tk
from tkinter import ttk
from tkinter import StringVar
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
import pandas as pd
import random
import time

# Simulação de dados de desenvolvimento sustentável
def generate_fake_data():
    countries = ["Country1", "Country2", "Country3"]
    goals = ["Goal1", "Goal2", "Goal3"]
    indicators = ["Indicator1", "Indicator2", "Indicator3"]

    country = random.choice(countries)
    goal = random.choice(goals)
    indicator = random.choice(indicators)
    value = random.uniform(0, 100)

    return country, goal, indicator, value

# Função para atualizar e visualizar dados em tempo real
def real_time_monitoring():
    def update_plot():
        nonlocal df
        country, goal, indicator, value = generate_fake_data()
        timestamp = time.strftime("%Y-%m-%d %H:%M:%S")
        
        new_row = {"Country": country, "Goal": goal, "Indicator": indicator, "Value": value, "Timestamp": timestamp}
        df = df.append(new_row, ignore_index=True)
        
        ax.clear()

        selected_goals = goal_var.get().split(", ")
        for selected_goal in selected_goals:
            goal_data = df[df["Goal"] == selected_goal]
            ax.plot(goal_data["Timestamp"], goal_data["Value"], label=selected_goal)
        
        ax.set_xlabel("Timestamp")
        ax.set_ylabel("Value")
        ax.set_title("Evolução do Desenvolvimento Sustentável da ONU")
        ax.legend()
        ax.grid(True)
        
        canvas.draw()
        root.after(5000, update_plot)  # Atualizar a cada 5 segundos

    def update_selected_goals(*args):
        # Atualizar o gráfico quando houver uma mudança nas metas selecionadas
        update_plot()

    root = tk.Tk()
    root.title("Monitoramento de Desenvolvimento Sustentável")

    df = pd.DataFrame(columns=["Country", "Goal", "Indicator", "Value", "Timestamp"])
    
    goals = df["Goal"].unique()
    goal_var = StringVar()
    goal_var.set(", ".join(goals))
    
    goals_menu = ttk.Combobox(root, textvariable=goal_var, values=goals, state="readonly")
    goals_menu.bind("<<ComboboxSelected>>", update_selected_goals)
    goals_menu.pack()

    fig, ax = plt.subplots(figsize=(10, 6))
    canvas = FigureCanvasTkAgg(fig, master=root)
    canvas_widget = canvas.get_tk_widget()
    canvas_widget.pack()

    update_plot()
    
    root.mainloop()

if __name__ == "__main__":
    real_time_monitoring()
